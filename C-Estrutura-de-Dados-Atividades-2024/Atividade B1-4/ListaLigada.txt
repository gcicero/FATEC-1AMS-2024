/*------------------------------------------------------------------------*/
/*   FATEC-São Caetano do Sul                 Estrutura de Dados          */
/*                         Giovanni Cicero                                */
/*             Objetivo: Lista Ligada                                     */
/*             Paradigama: - programação Estruturada                      */
/*                                                                        */
/*                                                         Data:31/03/2024*/
/*-------------------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>

struct lista {
  int info;
  struct lista *prox;
};
typedef struct lista Lista;

/*----------------------------------------------------------------------*/
/*        função insere : insere os valores no inicio da lista          */
/*----------------------------------------------------------------------*/

Lista *lst_insere(Lista *l, int i) {
  Lista *novo = (Lista *)malloc(sizeof(Lista));
  if (novo == NULL) {
    printf("Erro: não foi possível alocar memória para novo elemento.\n");
    exit(EXIT_FAILURE);
  }

  novo->info = i;
  novo->prox = l;
  return novo;
}

/*----------------------------------------------------------------------*/
/*        função imprime : Imprime valores dos elementos                */
/*----------------------------------------------------------------------*/

void lst_imprime(Lista *l) {
  if (l == NULL) {
    printf("Lista Vazia\n");
    return; // Retorna imediatamente se a lista estiver vazia
  }

  Lista *p; /*Variável auxiliar para percorrer a lista */
  for (p = l; p != NULL; p = p->prox)
    printf("%d\n", p->info);
}

/*----------------------------------------------------------------------*/
/*         função busca : Busca um elemento na lista                    */
/*----------------------------------------------------------------------*/

int lst_busca(Lista *l, int v) {
  Lista *p;
  for (p = l; p != NULL; p = p->prox) {
    if (p->info == v) {
      printf("Encontrou  : %d\n", v);
      return 1;
    }
  }
  printf("Nao encontrou  : %d\n", v);
  return 0;
}

/*----------------------------------------------------------------------*/
/*          função libera: "Destroi" a lista da memória                 */
/*----------------------------------------------------------------------*/

void lst_libera(Lista *l) {
  Lista *p = l;
  while (p != NULL) {
    Lista *t = p->prox; /* guarda referência para Próximo Elemento */
    free(p);            /* libera a memória apontada por p*/
    p = t;              /* aponta p para o próximo*/
  }
}

/*----------------------------------------------------------------------*/
/*           função deleta : deleta elemento da lista                   */
/*----------------------------------------------------------------------*/

Lista *lst_deleta(Lista *l, int v) {
  Lista *ant = NULL; /* ponteiro para elemento anterior*/
  Lista *p = l;      /* ponteiro para percorrer a lista*/

  /*  procura elemento na lista, guardando anterior */
  while (p != NULL && p->info != v) {
    ant = p;
    p = p->prox;
  }

  /*  Verifica se achou elemento */
  if (p == NULL) {
    printf("Nao encontrou elemento para DELETAR :  %d\n", v);
    return l; /* retorna lista original, não foi feita nenhuma modificação */
  }

  /* Retira elemento */
  if (ant == NULL) {
    /* retira elemento do início*/
    l = p->prox;
  } else {
    /*  retira elemento do meio da lista*/
    ant->prox = p->prox;
  }
  free(p);
  return l;
}

/*----------------------------------------------------------------------*/
/*           função menu : cria o menu de opções                        */
/*----------------------------------------------------------------------*/

int menu(void) {
  int opt;

  printf("Escolha a opcao\n");
  printf("0. Sair\n");
  printf("1. Incluir\n");
  printf("2. Consultar\n");
  printf("3. Deletar\n");
  printf("4. Listar\n");
  printf("Opcao: ");
  scanf("%d", &opt);

  return opt;
}

/*----------------------------------------------------------------------*/
/*           função opcao : indexador das opções do menu                */
/*----------------------------------------------------------------------*/

void opcao(Lista **l, int op) {
  switch (op) {
  case 0:
    break; // Não faz nada, a lista será liberada depois do loop do-while
  case 1:
    printf("Informe o elemento a ser inserido: ");
    int elemento_inserir;
    scanf("%d", &elemento_inserir);
    *l = lst_insere(*l, elemento_inserir);
    break;
  case 2:
    printf("Informe o elemento a ser consultado: ");
    int elemento;
    scanf("%d", &elemento);
    lst_busca(*l, elemento);
    break;
  case 3:
    printf("Informe o elemento a ser deletado: ");
    int elemento_deletar;
    scanf("%d", &elemento_deletar);
    *l = lst_deleta(*l, elemento_deletar);
    break;
  case 4:
    lst_imprime(*l);
    break;
  default:
    printf("Comando invalido\n\n");
  }
}

/*----------------------------------------------------------------------*/
/*                                  M A I N */
/*----------------------------------------------------------------------*/

int main(void) {
  Lista *l;
  int opt;
  do {
    opt = menu();
    opcao(&l, opt);
  } while (opt);

  lst_libera(l);
  return 0;
}
